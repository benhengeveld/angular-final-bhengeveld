{"ast":null,"code":"import { Store } from \"../models/store.model\";\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"./database.service\";\nexport let StoresDBService = /*#__PURE__*/(() => {\n  class StoresDBService {\n    constructor(database) {\n      this.database = database;\n    }\n\n    static errorHandler(error) {\n      console.error(\"Error: \" + error);\n    } //crud operations\n\n\n    insert(store, callback) {\n      function txFunction(tx) {\n        let sql = 'INSERT INTO stores(city, address, postalCode) VALUES(?,?,?);';\n        let options = [store.city, store.address, store.postalCode];\n        tx.executeSql(sql, options, callback, StoresDBService.errorHandler);\n      }\n\n      this.database.getDatabase().transaction(txFunction, StoresDBService.errorHandler, () => {\n        console.log('Success: stores insert transaction successful');\n      });\n    }\n\n    selectAll() {\n      let options = [];\n      let stores = [];\n      return new Promise((resolve, reject) => {\n        function txFunction(tx) {\n          let sql = \"SELECT * FROM stores;\";\n          tx.executeSql(sql, options, (tx, results) => {\n            if (results.rows.length > 0) {\n              for (let i = 0; i < results.rows.length; i++) {\n                let row = results.rows[i];\n                let s = new Store(row['city'], row['address'], row['postalCode']);\n                s.id = row['id'];\n                stores.push(s);\n              }\n\n              resolve(stores);\n            } else {\n              reject(\"No stores found\");\n            }\n          }, StoresDBService.errorHandler);\n        }\n\n        this.database.getDatabase().transaction(txFunction, StoresDBService.errorHandler, () => {\n          console.log('Success: stores selectAll transaction successful');\n        });\n      });\n    }\n\n    select(id) {\n      let options = [id];\n      let store = null;\n      return new Promise((resolve, reject) => {\n        function txFunction(tx) {\n          let sql = \"SELECT * FROM stores WHERE id=?;\";\n          tx.executeSql(sql, options, (tx, results) => {\n            if (results.rows.length > 0) {\n              let row = results.rows[0];\n              store = new Store(row['city'], row['address'], row['postalCode']);\n              store.id = row['id'];\n              resolve(store);\n            } else {\n              reject(\"No store found\");\n            }\n          }, StoresDBService.errorHandler);\n        }\n\n        this.database.getDatabase().transaction(txFunction, StoresDBService.errorHandler, () => {\n          console.log('Success: stores select transaction successful');\n        });\n      });\n    }\n\n    delete(store, callback) {\n      function txFunction(tx) {\n        let sql = 'DELETE FROM stores WHERE id=?;';\n        let options = [store.id];\n        tx.executeSql(sql, options, callback, StoresDBService.errorHandler);\n      }\n\n      this.database.getDatabase().transaction(txFunction, StoresDBService.errorHandler, () => {\n        console.log('Success: stores delete transaction successful');\n      });\n    }\n\n    update(store, callback) {\n      function txFunction(tx) {\n        let sql = 'UPDATE stores SET city=?, address=?, postalCode=? WHERE id=?;';\n        let options = [store.city, store.address, store.postalCode, store.id];\n        tx.executeSql(sql, options, callback, StoresDBService.errorHandler);\n      }\n\n      this.database.getDatabase().transaction(txFunction, StoresDBService.errorHandler, () => {\n        console.log('Success: stores update transaction successful');\n      });\n    }\n\n  }\n\n  StoresDBService.ɵfac = function StoresDBService_Factory(t) {\n    return new (t || StoresDBService)(i0.ɵɵinject(i1.DatabaseService));\n  };\n\n  StoresDBService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: StoresDBService,\n    factory: StoresDBService.ɵfac,\n    providedIn: 'root'\n  });\n  return StoresDBService;\n})();","map":null,"metadata":{},"sourceType":"module"}