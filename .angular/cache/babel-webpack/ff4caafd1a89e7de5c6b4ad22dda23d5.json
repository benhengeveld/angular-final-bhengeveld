{"ast":null,"code":"import * as i0 from \"@angular/core\";\nexport let DatabaseService = /*#__PURE__*/(() => {\n  class DatabaseService {\n    constructor() {\n      this.db = null;\n    }\n\n    static errorHandler(error) {\n      console.error(\"Error: \" + error);\n    }\n\n    createDatabase() {\n      let shortName = \"TireStoreDB\";\n      let version = \"1.0\";\n      let displayName = \"DB for Angular TireStore App\";\n      let dbSize = 2 * 1024 * 1024;\n      this.db = openDatabase(shortName, version, displayName, dbSize, () => {\n        console.log(\"Success: Database created successfully\");\n      });\n    }\n\n    createTables() {\n      function txFunction(tx) {\n        let sql = \"CREATE TABLE IF NOT EXISTS items(\" + \" id INTEGER NOT NULL PRIMARY KEY AUTOINCREMENT,\" + \" name VARCHAR(25) NOT NULL,\" + \" price DOUBLE);\";\n        let options = [];\n        tx.executeSql(sql, options, () => {\n          console.info(\"Success: items create table successful\");\n        }, DatabaseService.errorHandler);\n        sql = \"CREATE TABLE IF NOT EXISTS stores(\" + \" id INTEGER NOT NULL PRIMARY KEY AUTOINCREMENT,\" + \" city VARCHAR(25) NOT NULL,\" + \" address VARCHAR(25) NOT NULL,\" + \" postalCode VARCHAR(25) NOT NULL);\";\n        tx.executeSql(sql, options, () => {\n          console.info(\"Success: stores create table successful\");\n        }, DatabaseService.errorHandler);\n        sql = \"CREATE TABLE IF NOT EXISTS employees(\" + \" id INTEGER NOT NULL PRIMARY KEY AUTOINCREMENT,\" + \" firstName VARCHAR(25) NOT NULL,\" + \" lastName VARCHAR(25) NOT NULL,\" + \" storeId INTEGER,\" + \" FOREIGN KEY (storeId) REFERENCES stores(id));\";\n        tx.executeSql(sql, options, () => {\n          console.info(\"Success: employees create table successful\");\n        }, DatabaseService.errorHandler);\n        sql = \"DROP TABLE IF EXISTS order_status\";\n        tx.executeSql(sql, options, () => {\n          console.info(\"Success: order_status drop table successful\");\n        }, DatabaseService.errorHandler);\n        sql = \"CREATE TABLE IF NOT EXISTS order_status(\" + \" id INTEGER NOT NULL PRIMARY KEY AUTOINCREMENT,\" + \" status VARCHAR(25) NOT NULL);\";\n        tx.executeSql(sql, options, () => {\n          console.info(\"Success: order_status create table successful\");\n        }, DatabaseService.errorHandler);\n        sql = \"INSERT INTO order_status(id, status) VALUES(1, 'Pending');\";\n        tx.executeSql(sql, options, () => {\n          console.info(\"Success: order_status insert successful\");\n        }, DatabaseService.errorHandler);\n        sql = \"INSERT INTO order_status(id, status) VALUES(2, 'Outbound');\";\n        tx.executeSql(sql, options, () => {\n          console.info(\"Success: order_status insert successful\");\n        }, DatabaseService.errorHandler);\n        sql = \"INSERT INTO order_status(id, status) VALUES(3, 'Delivered');\";\n        tx.executeSql(sql, options, () => {\n          console.info(\"Success: order_status insert successful\");\n        }, DatabaseService.errorHandler);\n        sql = \"CREATE TABLE IF NOT EXISTS orders(\" + \" id INTEGER NOT NULL PRIMARY KEY AUTOINCREMENT,\" + \" storeId INTEGER NOT NULL,\" + \" itemId INTEGER NOT NULL,\" + \" quantity INTEGER NOT NULL,\" + \" orderStatusId INTEGER,\" + \" FOREIGN KEY (storeId) REFERENCES stores(id),\" + \" FOREIGN KEY (itemId) REFERENCES items(id),\" + \" FOREIGN KEY (orderStatusId) REFERENCES order_status(id));\";\n        tx.executeSql(sql, options, () => {\n          console.info(\"Success: orders create table successful\");\n        }, DatabaseService.errorHandler);\n      }\n\n      this.getDatabase().transaction(txFunction, DatabaseService.errorHandler, () => {\n        console.log(\"Success: Table creation transaction successful\");\n      });\n    }\n\n    dropTables() {\n      function txFunction(tx) {\n        let sql = \"DROP TABLE IF EXISTS orders\";\n        let options = [];\n        tx.executeSql(sql, options, () => {\n          console.info(\"Success: orders drop table successful\");\n        }, DatabaseService.errorHandler);\n        sql = \"DROP TABLE IF EXISTS employees\";\n        tx.executeSql(sql, options, () => {\n          console.info(\"Success: employees drop table successful\");\n        }, DatabaseService.errorHandler);\n        sql = \"DROP TABLE IF EXISTS stores\";\n        tx.executeSql(sql, options, () => {\n          console.info(\"Success: stores drop table successful\");\n        }, DatabaseService.errorHandler);\n        sql = \"DROP TABLE IF EXISTS items\";\n        tx.executeSql(sql, options, () => {\n          console.info(\"Success: items drop table successful\");\n        }, DatabaseService.errorHandler);\n        sql = \"DROP TABLE IF EXISTS order_status\";\n        tx.executeSql(sql, options, () => {\n          console.info(\"Success: order_status drop table successful\");\n        }, DatabaseService.errorHandler);\n      }\n\n      this.getDatabase().transaction(txFunction, DatabaseService.errorHandler, () => {\n        console.log(\"Success: Table drop transaction successful\");\n      });\n    }\n\n    clearDB() {\n      let result = confirm(\"Do you really want to clear the database?\");\n\n      if (result) {\n        this.dropTables();\n        this.db = null;\n        alert(\"Database cleared!\");\n      }\n    }\n\n    initDB() {\n      if (this.db == null) {\n        try {\n          //create database\n          this.createDatabase(); //create tables\n\n          this.createTables();\n        } catch (e) {\n          console.error(\"Error in initDB(): \" + e);\n        }\n      }\n    }\n\n    getDatabase() {\n      this.initDB();\n      return this.db;\n    }\n\n  }\n\n  DatabaseService.ɵfac = function DatabaseService_Factory(t) {\n    return new (t || DatabaseService)();\n  };\n\n  DatabaseService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: DatabaseService,\n    factory: DatabaseService.ɵfac,\n    providedIn: 'root'\n  });\n  return DatabaseService;\n})();","map":null,"metadata":{},"sourceType":"module"}