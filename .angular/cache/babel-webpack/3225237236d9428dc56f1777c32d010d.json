{"ast":null,"code":"import { Item } from \"../models/item.model\";\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"./database.service\";\nexport let ItemsDBService = /*#__PURE__*/(() => {\n  class ItemsDBService {\n    constructor(database) {\n      this.database = database;\n    }\n\n    static errorHandler(error) {\n      console.error(\"Error: \" + error);\n    } //crud operations\n\n\n    insert(item, callback) {\n      function txFunction(tx) {\n        let sql = 'INSERT INTO items(name, price) VALUES(?,?);';\n        let options = [item.name, item.price];\n        tx.executeSql(sql, options, callback, ItemsDBService.errorHandler);\n      }\n\n      this.database.getDatabase().transaction(txFunction, ItemsDBService.errorHandler, () => {\n        console.log('Success: items insert transaction successful');\n      });\n    }\n\n    selectAll() {\n      let options = [];\n      let items = [];\n      return new Promise((resolve, reject) => {\n        function txFunction(tx) {\n          let sql = \"SELECT * FROM items;\";\n          tx.executeSql(sql, options, (tx, results) => {\n            if (results.rows.length > 0) {\n              for (let i = 0; i < results.rows.length; i++) {\n                let row = results.rows[i];\n                let item = new Item(row['name'], row['price']);\n                item.id = row['id'];\n                items.push(item);\n              }\n\n              resolve(items);\n            } else {\n              reject(\"No items found\");\n            }\n          }, ItemsDBService.errorHandler);\n        }\n\n        this.database.getDatabase().transaction(txFunction, ItemsDBService.errorHandler, () => {\n          console.log('Success: items selectAll transaction successful');\n        });\n      });\n    }\n\n    select(id) {\n      let options = [id];\n      let item = null;\n      return new Promise((resolve, reject) => {\n        function txFunction(tx) {\n          let sql = \"SELECT * FROM items WHERE id=?;\";\n          tx.executeSql(sql, options, (tx, results) => {\n            if (results.rows.length > 0) {\n              let row = results.rows[0];\n              item = new Item(row['name'], row['price']);\n              item.id = row['id'];\n              resolve(item);\n            } else {\n              reject(\"No item found\");\n            }\n          }, ItemsDBService.errorHandler);\n        }\n\n        this.database.getDatabase().transaction(txFunction, ItemsDBService.errorHandler, () => {\n          console.log('Success: items select transaction successful');\n        });\n      });\n    }\n\n    delete(item, callback) {\n      function txFunction(tx) {\n        let sql = 'DELETE FROM items WHERE id=?;';\n        let options = [item.id];\n        tx.executeSql(sql, options, callback, ItemsDBService.errorHandler);\n      }\n\n      this.database.getDatabase().transaction(txFunction, ItemsDBService.errorHandler, () => {\n        console.log('Success: items delete transaction successful');\n      });\n    }\n\n    update(item, callback) {\n      function txFunction(tx) {\n        let sql = 'UPDATE items SET name=?, price=? WHERE id=?;';\n        let options = [item.name, item.price, item.id];\n        tx.executeSql(sql, options, callback, ItemsDBService.errorHandler);\n      }\n\n      this.database.getDatabase().transaction(txFunction, ItemsDBService.errorHandler, () => {\n        console.log('Success: items update transaction successful');\n      });\n    }\n\n  }\n\n  ItemsDBService.ɵfac = function ItemsDBService_Factory(t) {\n    return new (t || ItemsDBService)(i0.ɵɵinject(i1.DatabaseService));\n  };\n\n  ItemsDBService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: ItemsDBService,\n    factory: ItemsDBService.ɵfac,\n    providedIn: 'root'\n  });\n  return ItemsDBService;\n})();","map":null,"metadata":{},"sourceType":"module"}