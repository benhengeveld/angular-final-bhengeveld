{"ast":null,"code":"import { Employee } from \"../models/employee.model\";\nimport { Store } from \"../models/store.model\";\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"./database.service\";\nexport let EmployeesDBService = /*#__PURE__*/(() => {\n  class EmployeesDBService {\n    constructor(database) {\n      this.database = database;\n    }\n\n    static errorHandler(error) {\n      console.error(\"Error: \" + error);\n    } //crud operations\n\n\n    insert(employee, callback) {\n      function txFunction(tx) {\n        let sql = 'INSERT INTO employees(firstName, lastName, storeId) VALUES(?,?,?);';\n        let options = [employee.firstName, employee.lastName, employee.storeId];\n        tx.executeSql(sql, options, callback, EmployeesDBService.errorHandler);\n      }\n\n      this.database.getDatabase().transaction(txFunction, EmployeesDBService.errorHandler, () => {\n        console.log('Success: employees insert transaction successful');\n      });\n    }\n\n    selectAll() {\n      let options = [];\n      let employees = [];\n      return new Promise((resolve, reject) => {\n        function txFunction(tx) {\n          let sql = \"SELECT e.id, e.firstName, e.lastName, e.storeId, s.id AS s_id, s.city, s.address, s.postalCode FROM employees AS e JOIN stores AS s ON e.storeId = s.id;\";\n          tx.executeSql(sql, options, (tx, results) => {\n            if (results.rows.length > 0) {\n              for (let i = 0; i < results.rows.length; i++) {\n                let row = results.rows[i];\n                let employee = new Employee(row['firstName'], row['lastName'], row['storeId']);\n                employee.id = row['id'];\n                let store = new Store(row['city'], row['address'], row['postalCode']);\n                store.id = row['s_id'];\n                employee.store = store;\n                employees.push(employee);\n              }\n\n              resolve(employees);\n            } else {\n              reject(\"No employees found\");\n            }\n          }, EmployeesDBService.errorHandler);\n        }\n\n        this.database.getDatabase().transaction(txFunction, EmployeesDBService.errorHandler, () => {\n          console.log('Success: employees selectAll transaction successful');\n        });\n      });\n    }\n\n    selectAllWhereStore(storeId) {\n      let options = [storeId];\n      let employees = [];\n      return new Promise((resolve, reject) => {\n        function txFunction(tx) {\n          let sql = \"SELECT e.id, e.firstName, e.lastName, e.storeId, s.id AS s_id, s.city, s.address, s.postalCode FROM employees AS e JOIN stores AS s ON e.storeId = s.id WHERE storeId=?;\";\n          tx.executeSql(sql, options, (tx, results) => {\n            if (results.rows.length > 0) {\n              for (let i = 0; i < results.rows.length; i++) {\n                let row = results.rows[i];\n                let employee = new Employee(row['firstName'], row['lastName'], row['storeId']);\n                employee.id = row['id'];\n                let store = new Store(row['city'], row['address'], row['postalCode']);\n                store.id = row['s_id'];\n                employee.store = store;\n                employees.push(employee);\n              }\n\n              resolve(employees);\n            } else {\n              reject(\"No employees found\");\n            }\n          }, EmployeesDBService.errorHandler);\n        }\n\n        this.database.getDatabase().transaction(txFunction, EmployeesDBService.errorHandler, () => {\n          console.log('Success: employees selectAll transaction successful');\n        });\n      });\n    }\n\n    select(id) {\n      let options = [id];\n      let employee = null;\n      return new Promise((resolve, reject) => {\n        function txFunction(tx) {\n          let sql = \"SELECT e.id, e.firstName, e.lastName, e.storeId, s.id AS s_id, s.city, s.address, s.postalCode FROM employees AS e JOIN stores AS s ON e.storeId = s.id WHERE e.id=?;\";\n          tx.executeSql(sql, options, (tx, results) => {\n            if (results.rows.length > 0) {\n              let row = results.rows[0];\n              employee = new Employee(row['firstName'], row['lastName'], row['storeId']);\n              employee.id = row['id'];\n              let store = new Store(row['city'], row['address'], row['postalCode']);\n              store.id = row['s_id'];\n              employee.store = store;\n              resolve(employee);\n            } else {\n              reject(\"No employee found\");\n            }\n          }, EmployeesDBService.errorHandler);\n        }\n\n        this.database.getDatabase().transaction(txFunction, EmployeesDBService.errorHandler, () => {\n          console.log('Success: employees select transaction successful');\n        });\n      });\n    }\n\n    delete(employee, callback) {\n      function txFunction(tx) {\n        let sql = 'DELETE FROM employees WHERE id=?;';\n        let options = [employee.id];\n        tx.executeSql(sql, options, callback, EmployeesDBService.errorHandler);\n      }\n\n      this.database.getDatabase().transaction(txFunction, EmployeesDBService.errorHandler, () => {\n        console.log('Success: employees delete transaction successful');\n      });\n    }\n\n    update(employee, callback) {\n      function txFunction(tx) {\n        let sql = 'UPDATE employees SET firstName=?, lastName=?, storeId=? WHERE id=?;';\n        let options = [employee.firstName, employee.lastName, employee.storeId, employee.id];\n        tx.executeSql(sql, options, callback, EmployeesDBService.errorHandler);\n      }\n\n      this.database.getDatabase().transaction(txFunction, EmployeesDBService.errorHandler, () => {\n        console.log('Success: employees update transaction successful');\n      });\n    }\n\n  }\n\n  EmployeesDBService.ɵfac = function EmployeesDBService_Factory(t) {\n    return new (t || EmployeesDBService)(i0.ɵɵinject(i1.DatabaseService));\n  };\n\n  EmployeesDBService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: EmployeesDBService,\n    factory: EmployeesDBService.ɵfac,\n    providedIn: 'root'\n  });\n  return EmployeesDBService;\n})();","map":null,"metadata":{},"sourceType":"module"}