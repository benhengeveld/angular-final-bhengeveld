{"ast":null,"code":"import { Store } from \"../models/store.model\";\nimport { Order } from \"../models/order.model\";\nimport { Item } from \"../models/item.model\";\nimport { OrderStatus } from \"../models/orderStatus.model\";\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"./database.service\";\nexport let OrdersDBService = /*#__PURE__*/(() => {\n  class OrdersDBService {\n    constructor(database) {\n      this.database = database;\n    }\n\n    static errorHandler(error) {\n      console.error(\"Error: \" + error);\n    } //crud operations\n\n\n    insert(order, callback) {\n      function txFunction(tx) {\n        let sql = 'INSERT INTO orders(storeId, itemId, quantity, orderStatusId) VALUES(?,?,?,?);';\n        let options = [order.storeId, order.itemId, order.quantity, order.orderStatusId];\n        tx.executeSql(sql, options, callback, OrdersDBService.errorHandler);\n      }\n\n      this.database.getDatabase().transaction(txFunction, OrdersDBService.errorHandler, () => {\n        console.log('Success: orders insert transaction successful');\n      });\n    }\n\n    selectAll() {\n      let options = [];\n      let orders = [];\n      return new Promise((resolve, reject) => {\n        function txFunction(tx) {\n          let sql = \"SELECT o.id, o.storeId, o.itemId, o.quantity, o.orderStatusId, s.id AS s_id, s.city, s.address, s.postalCode, i.id AS i_id, i.name, i.price, os.id AS os_id, os.status FROM orders AS o JOIN stores AS s ON o.storeId = s.id JOIN items AS i ON o.itemId = i.id JOIN order_status as os ON o.orderStatusId = os.id;\";\n          tx.executeSql(sql, options, (tx, results) => {\n            if (results.rows.length > 0) {\n              for (let i = 0; i < results.rows.length; i++) {\n                let row = results.rows[i];\n                let order = new Order(row['storeId'], row['itemId'], row['quantity'], row['orderStatusId']);\n                order.id = row['id'];\n                let store = new Store(row['city'], row['address'], row['postalCode']);\n                store.id = row['s_id'];\n                order.store = store;\n                let item = new Item(row['name'], row['price']);\n                item.id = row['i_id'];\n                order.item = item;\n                let orderStatus = new OrderStatus(row['status']);\n                orderStatus.id = row['os_id'];\n                order.orderStatus = orderStatus;\n                orders.push(order);\n              }\n\n              resolve(orders);\n            } else {\n              reject(\"No orders found\");\n            }\n          }, OrdersDBService.errorHandler);\n        }\n\n        this.database.getDatabase().transaction(txFunction, OrdersDBService.errorHandler, () => {\n          console.log('Success: orders selectAll transaction successful');\n        });\n      });\n    }\n\n    selectAllWhereStatus(orderStatusId) {\n      let options = [orderStatusId];\n      let orders = [];\n      return new Promise((resolve, reject) => {\n        function txFunction(tx) {\n          let sql = \"SELECT o.id, o.storeId, o.itemId, o.quantity, o.orderStatusId, s.id AS s_id, s.city, s.address, s.postalCode, i.id AS i_id, i.name, i.price, os.id AS os_id, os.status FROM orders AS o JOIN stores AS s ON o.storeId = s.id JOIN items AS i ON o.itemId = i.id JOIN order_status as os ON o.orderStatusId = os.id WHERE o.orderStatusId=?;\";\n          tx.executeSql(sql, options, (tx, results) => {\n            if (results.rows.length > 0) {\n              for (let i = 0; i < results.rows.length; i++) {\n                let row = results.rows[i];\n                let order = new Order(row['storeId'], row['itemId'], row['quantity'], row['orderStatusId']);\n                order.id = row['id'];\n                let store = new Store(row['city'], row['address'], row['postalCode']);\n                store.id = row['s_id'];\n                order.store = store;\n                let item = new Item(row['name'], row['price']);\n                item.id = row['i_id'];\n                order.item = item;\n                let orderStatus = new OrderStatus(row['status']);\n                orderStatus.id = row['os_id'];\n                order.orderStatus = orderStatus;\n                orders.push(order);\n              }\n\n              resolve(orders);\n            } else {\n              reject(\"No orders found\");\n            }\n          }, OrdersDBService.errorHandler);\n        }\n\n        this.database.getDatabase().transaction(txFunction, OrdersDBService.errorHandler, () => {\n          console.log('Success: orders selectAll transaction successful');\n        });\n      });\n    }\n\n    selectAllWhereStore(storeId) {\n      let options = [storeId];\n      let orders = [];\n      return new Promise((resolve, reject) => {\n        function txFunction(tx) {\n          let sql = \"SELECT o.id, o.storeId, o.itemId, o.quantity, o.orderStatusId, s.id AS s_id, s.city, s.address, s.postalCode, i.id AS i_id, i.name, i.price, os.id AS os_id, os.status FROM orders AS o JOIN stores AS s ON o.storeId = s.id JOIN items AS i ON o.itemId = i.id JOIN order_status as os ON o.orderStatusId = os.id WHERE o.storeId=?;\";\n          tx.executeSql(sql, options, (tx, results) => {\n            if (results.rows.length > 0) {\n              for (let i = 0; i < results.rows.length; i++) {\n                let row = results.rows[i];\n                let order = new Order(row['storeId'], row['itemId'], row['quantity'], row['orderStatusId']);\n                order.id = row['id'];\n                let store = new Store(row['city'], row['address'], row['postalCode']);\n                store.id = row['s_id'];\n                order.store = store;\n                let item = new Item(row['name'], row['price']);\n                item.id = row['i_id'];\n                order.item = item;\n                let orderStatus = new OrderStatus(row['status']);\n                orderStatus.id = row['os_id'];\n                order.orderStatus = orderStatus;\n                orders.push(order);\n              }\n\n              resolve(orders);\n            } else {\n              reject(\"No orders found\");\n            }\n          }, OrdersDBService.errorHandler);\n        }\n\n        this.database.getDatabase().transaction(txFunction, OrdersDBService.errorHandler, () => {\n          console.log('Success: orders selectAll transaction successful');\n        });\n      });\n    }\n\n    selectAllWhereStoreAndStatus(storeId, orderStatusId) {\n      let options = [storeId, orderStatusId];\n      let orders = [];\n      return new Promise((resolve, reject) => {\n        function txFunction(tx) {\n          let sql = \"SELECT o.id, o.storeId, o.itemId, o.quantity, o.orderStatusId, s.id AS s_id, s.city, s.address, s.postalCode, i.id AS i_id, i.name, i.price, os.id AS os_id, os.status FROM orders AS o JOIN stores AS s ON o.storeId = s.id JOIN items AS i ON o.itemId = i.id JOIN order_status as os ON o.orderStatusId = os.id WHERE o.storeId=? AND o.orderStatusId=?;\";\n          tx.executeSql(sql, options, (tx, results) => {\n            if (results.rows.length > 0) {\n              for (let i = 0; i < results.rows.length; i++) {\n                let row = results.rows[i];\n                let order = new Order(row['storeId'], row['itemId'], row['quantity'], row['orderStatusId']);\n                order.id = row['id'];\n                let store = new Store(row['city'], row['address'], row['postalCode']);\n                store.id = row['s_id'];\n                order.store = store;\n                let item = new Item(row['name'], row['price']);\n                item.id = row['i_id'];\n                order.item = item;\n                let orderStatus = new OrderStatus(row['status']);\n                orderStatus.id = row['os_id'];\n                order.orderStatus = orderStatus;\n                orders.push(order);\n              }\n\n              resolve(orders);\n            } else {\n              reject(\"No orders found\");\n            }\n          }, OrdersDBService.errorHandler);\n        }\n\n        this.database.getDatabase().transaction(txFunction, OrdersDBService.errorHandler, () => {\n          console.log('Success: orders selectAll transaction successful');\n        });\n      });\n    }\n\n    selectAllWhereItem(itemId) {\n      let options = [itemId];\n      let orders = [];\n      return new Promise((resolve, reject) => {\n        function txFunction(tx) {\n          let sql = \"SELECT o.id, o.storeId, o.itemId, o.quantity, o.orderStatusId, s.id AS s_id, s.city, s.address, s.postalCode, i.id AS i_id, i.name, i.price, os.id AS os_id, os.status FROM orders AS o JOIN stores AS s ON o.storeId = s.id JOIN items AS i ON o.itemId = i.id JOIN order_status as os ON o.orderStatusId = os.id WHERE o.itemId=?;\";\n          tx.executeSql(sql, options, (tx, results) => {\n            if (results.rows.length > 0) {\n              for (let i = 0; i < results.rows.length; i++) {\n                let row = results.rows[i];\n                let order = new Order(row['storeId'], row['itemId'], row['quantity'], row['orderStatusId']);\n                order.id = row['id'];\n                let store = new Store(row['city'], row['address'], row['postalCode']);\n                store.id = row['s_id'];\n                order.store = store;\n                let item = new Item(row['name'], row['price']);\n                item.id = row['i_id'];\n                order.item = item;\n                let orderStatus = new OrderStatus(row['status']);\n                orderStatus.id = row['os_id'];\n                order.orderStatus = orderStatus;\n                orders.push(order);\n              }\n\n              resolve(orders);\n            } else {\n              reject(\"No orders found\");\n            }\n          }, OrdersDBService.errorHandler);\n        }\n\n        this.database.getDatabase().transaction(txFunction, OrdersDBService.errorHandler, () => {\n          console.log('Success: orders selectAll transaction successful');\n        });\n      });\n    }\n\n    selectAllWhereItemAndStatus(itemId, orderStatusId) {\n      let options = [itemId, orderStatusId];\n      let orders = [];\n      return new Promise((resolve, reject) => {\n        function txFunction(tx) {\n          let sql = \"SELECT o.id, o.storeId, o.itemId, o.quantity, o.orderStatusId, s.id AS s_id, s.city, s.address, s.postalCode, i.id AS i_id, i.name, i.price, os.id AS os_id, os.status FROM orders AS o JOIN stores AS s ON o.storeId = s.id JOIN items AS i ON o.itemId = i.id JOIN order_status as os ON o.orderStatusId = os.id WHERE o.itemId=? AND o.orderStatusId=?;\";\n          tx.executeSql(sql, options, (tx, results) => {\n            if (results.rows.length > 0) {\n              for (let i = 0; i < results.rows.length; i++) {\n                let row = results.rows[i];\n                let order = new Order(row['storeId'], row['itemId'], row['quantity'], row['orderStatusId']);\n                order.id = row['id'];\n                let store = new Store(row['city'], row['address'], row['postalCode']);\n                store.id = row['s_id'];\n                order.store = store;\n                let item = new Item(row['name'], row['price']);\n                item.id = row['i_id'];\n                order.item = item;\n                let orderStatus = new OrderStatus(row['status']);\n                orderStatus.id = row['os_id'];\n                order.orderStatus = orderStatus;\n                orders.push(order);\n              }\n\n              resolve(orders);\n            } else {\n              reject(\"No orders found\");\n            }\n          }, OrdersDBService.errorHandler);\n        }\n\n        this.database.getDatabase().transaction(txFunction, OrdersDBService.errorHandler, () => {\n          console.log('Success: orders selectAll transaction successful');\n        });\n      });\n    }\n\n    select(id) {\n      let options = [id];\n      let order = null;\n      return new Promise((resolve, reject) => {\n        function txFunction(tx) {\n          let sql = \"SELECT o.id, o.storeId, o.itemId, o.quantity, o.orderStatusId, s.id AS s_id, s.city, s.address, s.postalCode, i.id AS i_id, i.name, i.price, os.id AS os_id, os.status FROM orders AS o JOIN stores AS s ON o.storeId = s.id JOIN items AS i ON o.itemId = i.id JOIN order_status as os ON o.orderStatusId = os.id WHERE o.id=?;\";\n          tx.executeSql(sql, options, (tx, results) => {\n            if (results.rows.length > 0) {\n              let row = results.rows[0];\n              order = new Order(row['storeId'], row['itemId'], row['quantity'], row['orderStatusId']);\n              order.id = row['id'];\n              let store = new Store(row['city'], row['address'], row['postalCode']);\n              store.id = row['s_id'];\n              order.store = store;\n              let item = new Item(row['name'], row['price']);\n              item.id = row['i_id'];\n              order.item = item;\n              let orderStatus = new OrderStatus(row['status']);\n              orderStatus.id = row['os_id'];\n              order.orderStatus = orderStatus;\n              resolve(order);\n            } else {\n              reject(\"No order found\");\n            }\n          }, OrdersDBService.errorHandler);\n        }\n\n        this.database.getDatabase().transaction(txFunction, OrdersDBService.errorHandler, () => {\n          console.log('Success: orders select transaction successful');\n        });\n      });\n    }\n\n    delete(order, callback) {\n      function txFunction(tx) {\n        let sql = 'DELETE FROM orders WHERE id=?;';\n        let options = [order.id];\n        tx.executeSql(sql, options, callback, OrdersDBService.errorHandler);\n      }\n\n      this.database.getDatabase().transaction(txFunction, OrdersDBService.errorHandler, () => {\n        console.log('Success: orders delete transaction successful');\n      });\n    }\n\n    update(order, callback) {\n      function txFunction(tx) {\n        let sql = 'UPDATE orders SET storeId=?, itemId=?, quantity=?, orderStatusId=? WHERE id=?;';\n        let options = [order.storeId, order.itemId, order.quantity, order.orderStatusId, order.id];\n        tx.executeSql(sql, options, callback, OrdersDBService.errorHandler);\n      }\n\n      this.database.getDatabase().transaction(txFunction, OrdersDBService.errorHandler, () => {\n        console.log('Success: orders update transaction successful');\n      });\n    }\n\n  }\n\n  OrdersDBService.ɵfac = function OrdersDBService_Factory(t) {\n    return new (t || OrdersDBService)(i0.ɵɵinject(i1.DatabaseService));\n  };\n\n  OrdersDBService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: OrdersDBService,\n    factory: OrdersDBService.ɵfac,\n    providedIn: 'root'\n  });\n  return OrdersDBService;\n})();","map":null,"metadata":{},"sourceType":"module"}